# (C) Copyright 2020, 2021, 2022 IBM. All Rights Reserved.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

notifications:
  email: false

# Disable double triggering when issuing a PR from a branch in the main repo.
branches:
  only:
    - "master"
    - /^release\/.*$/

stages:
  - Test and lint
  - Test multiple python versions
  - Build wheels

# Parent stage definition, to avoid copy-pasting.
job_compile_common: &job_compile_common
  os: linux
  dist: bionic
  language: python
  before_install:
    - sudo apt-get -qq install -y ca-certificates
    - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y 
    - sudo apt-get update
    - sudo apt-get install -y libopenblas-dev gcc-8 g++-8
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8
  install:
    # Set the python executable, to force cmake picking the right one.
    - PYTHON_EXECUTABLE=~/virtualenv/python$TRAVIS_PYTHON_VERSION/bin/python$TRAVIS_PYTHON_VERSION
    - pip install -r requirements.txt pytest
    # Install the package in editable mode.
    - VERBOSE=1 pip install -v -e ".[visualization]"
  script:
    - pip install "parameterized==0.7.4"
    - make pytest

build_deploy_common: &build_deploy_common
  deploy:
    provider: s3
    access_key_id: $COS_ACCESS_KEY_ID
    secret_access_key: $COS_SECRET_ACCESS_KEY
    bucket: $COS_BUCKET
    skip_cleanup: true
    local_dir: wheelhouse
    endpoint: https://$COS_ENDPOINT
    on:
      all_branches: true

jobs:
  include:
  - name: "Compile and test. Python 3.7"
    <<: *job_compile_common
    stage: Test and lint
    python: "3.7"
    env:
      - TEST_DATASET=true

  - name: "Compile and lint. Python 3.7"
    <<: *job_compile_common
    stage: Test and lint
    python: "3.7"
    script:
      - pip install -r requirements-dev.txt
      - make pycodestyle
      - make pylint
      - make mypy

  - name: "Compile and test. Python 3.8"
    <<: *job_compile_common
    stage: Test multiple python versions
    python: "3.8"

  - name: "Compile and test. Python 3.9"
    <<: *job_compile_common
    stage: Test multiple python versions
    python: "3.9"

  - name: "Compile and test. Python 3.10"
    <<: *job_compile_common
    stage: Test multiple python versions
    python: "3.10"

  - name: "Compile and test. Python 3.7, Torch 1.7.1"
    <<: *job_compile_common
    stage: Test multiple python versions
    python: "3.7"
    install:
      # Set the python executable, to force cmake picking the right one.
      - PYTHON_EXECUTABLE=~/virtualenv/python$TRAVIS_PYTHON_VERSION/bin/python$TRAVIS_PYTHON_VERSION
      - pip install -r requirements.txt pytest
      - pip install "torch==1.7.1"
      # Install the package in editable mode.
      - VERBOSE=1 pip install -v -e ".[visualization]"
    env:
      - TORCH_VERSION_SPECIFIER="==1.7.1"

  - name: "Build wheel for Python 3.7, 3.8, 3.9, 3.10 on Linux x86_64"
    os: linux
    dist: bionic
    language: python
    services: docker
    stage: Build wheels
    if: branch =~ /^release\/.*$/
    env:
      # Use a specific torch version.
      - CIBW_ENVIRONMENT="TORCH_VERSION_SPECIFIER='==1.8.1'"
      - CIBW_BEFORE_BUILD="pip install torch==1.8.1 torchvision==0.9.1 && pip install -r requirements.txt"
      - CIBW_MANYLINUX_X86_64_IMAGE="aihwkit/manylinux2014_x86_64_aihwkit"
      - CIBW_BUILD="cp37-manylinux_x86_64 cp38-manylinux_x86_64 cp39-manylinux_x86_64 cp310-manylinux_x86_64"
    before_install:
      - docker pull aihwkit/manylinux2014_x86_64_aihwkit
    install:
      - python3 -m pip install cibuildwheel==1.10.0
    script:
      # Build the wheels into './wheelhouse'.
      - python3 -m cibuildwheel --output-dir wheelhouse
    <<: *build_deploy_common

  - name: "Build wheel for Python 3.7, 3.8, 3.9, 3.10 on OS X"
    os: osx
    osx_image: xcode12.2
    stage: Build wheels
    if: branch =~ /^release\/.*$/
    addons:
      homebrew:
        packages:
          - openblas
        update: true
    env:
      # Use a specific torch version.
      - CIBW_ENVIRONMENT="TORCH_VERSION_SPECIFIER='==1.8.1'"
      - CIBW_BEFORE_BUILD="pip install torch==1.8.1 torchvision==0.9.1 && pip install ./delocate && pip install -r requirements.txt"
      - CIBW_BUILD="cp37-macosx_x86_64 cp38-macosx_x86_64 cp39-macosx_x86_64 cp310-macosx_x86_64"
    before_install:
      - git clone -b aihwkit https://github.com/aihwkit-bot/delocate.git
    install:
      - python3 -m pip install cibuildwheel==1.10.0
    script:
      # Build the wheels into './wheelhouse'.
      - python3 -m cibuildwheel --output-dir wheelhouse --platform macos
    <<: *build_deploy_common

  - name: "Build wheel for Python 3.7, 3.8, 3.9, 3.10 on win64"
    os: windows
    language: shell
    stage: Build wheels
    if: branch =~ /^release\/win.*$/
    env:
      # Use a specific torch version.
      - CIBW_ENVIRONMENT="TORCH_VERSION_SPECIFIER='==1.8.1'"
      - CIBW_BEFORE_BUILD="pip install torch==1.8.1+cpu -f https://download.pytorch.org/whl/torch_stable.html && pip install -r requirements.txt"
      - CIBW_BUILD="cp37-win_amd64 cp38-win_amd64 cp39-win_amd64 cp310-win_amd64"
      # Use unzipped OpenBLAS.
      - OPENBLAS_ROOT=C:\\BLAS
      - OPENBLAS_ROOT_DIR=C:\\BLAS
    before_install:
      # Install base python, and ensure it's on the PATH.
      - choco install python --version 3.8.6
      - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
      - ln -s /c/Python38/python.exe /c/Python38/python3.exe
      # Download and unzip OpenBLAS.
      - wget https://github.com/xianyi/OpenBLAS/releases/download/v0.3.12/OpenBLAS-0.3.12-x64.zip -q -O openblas.zip
      - mkdir C:\\BLAS
      - 7z x openblas.zip -oc:\\BLAS
    install:
      - python3 -m pip install cibuildwheel==1.6.4
    script:
      # Build the wheels into './wheelhouse'.
      - python3 -m cibuildwheel --output-dir wheelhouse
    <<: *build_deploy_common
